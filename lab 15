postgres=# DROP TABLE IF EXISTS employees CASCADE;
CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    manager_id INT REFERENCES employees(employee_id),
    salary NUMERIC(10,2),
    experience_years INT
);
NOTICE:  table "employees" does not exist, skipping
DROP TABLE
CREATE TABLE
postgres=# DROP TABLE IF EXISTS employees CASCADE;
CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    manager_id INT REFERENCES employees(employee_id),
    salary NUMERIC(10,2),
    experience_years INT
);
DROP TABLE
CREATE TABLE
postgres=# DROP TABLE IF EXISTS warehouse_1 CASCADE;
CREATE TABLE warehouse_1 (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    quantity INT
);
NOTICE:  table "warehouse_1" does not exist, skipping
DROP TABLE
CREATE TABLE
postgres=# DROP TABLE IF EXISTS warehouse_2 CASCADE;
CREATE TABLE warehouse_2 (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    quantity INT
);
NOTICE:  table "warehouse_2" does not exist, skipping
DROP TABLE
CREATE TABLE
postgres=# 
postgres=# DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS customers CASCADE;

CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    order_date DATE,
    total_amount NUMERIC(10,2),
    region_id INT
);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(order_id),
    product_id INT,
    quantity INT,
    price NUMERIC(10,2)
);
postgres=# DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS customers CASCADE;

CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES customers(customer_id),
    order_date DATE,
    total_amount NUMERIC(10,2),
    region_id INT
);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(order_id),
    product_id INT,
    quantity INT,
    price NUMERIC(10,2)
);
NOTICE:  table "order_items" does not exist, skipping
DROP TABLE
NOTICE:  table "orders" does not exist, skipping
DROP TABLE
NOTICE:  table "customers" does not exist, skipping
DROP TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
postgres=# INSERT INTO employees(first_name, last_name, department, manager_id, salary, experience_years) VALUES
('Alice', 'Anderson', 'Engineering', NULL, 95000, 6),
('Bob', 'Brown', 'Engineering', 1, 120000, 8),
('Charlie', 'Clark', 'Sales', 2, 70000, 5),
('Diana', 'Davis', 'Sales', 2, 50000, 3),
('Evan', 'Edwards', 'HR', NULL, 60000, 7),
('Frank', 'Fisher', 'Engineering', 1, 80000, 4),
('Grace', 'Green', 'Marketing', NULL, 55000, 5),
('Hannah', 'Hill', 'Marketing', 7, 62000, 6),
('Ian', 'Irwin', 'Sales', 3, 90000, 7),
('Julia', 'Jones', 'HR', 5, 58000, 4);
INSERT 0 10
postgres=# INSERT INTO sales(product_name, year, sales_amount) VALUES
('Strawberry', 2022, 1000),
('Strawberry', 2023, 1500),
('Strawberry', 2024, 2000),
('Blueberry', 2022, 1200),
('Blueberry', 2023, 1800),
('Blueberry', 2024, 2200),
('Mango', 2022, 900),
('Mango', 2023, 1300),
('Mango', 2024, 1700);
ERROR:  relation "sales" does not exist
LINE 1: INSERT INTO sales(product_name, year, sales_amount) VALUES
                    ^
postgres=# DROP TABLE IF EXISTS sales CASCADE;
CREATE TABLE sales (
    sale_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100),
    year INT,
    sales_amount NUMERIC(10,2)
);
NOTICE:  table "sales" does not exist, skipping
DROP TABLE
CREATE TABLE
postgres=# INSERT INTO sales(product_name, year, sales_amount) VALUES
('Strawberry', 2022, 1000),
('Strawberry', 2023, 1500),
('Strawberry', 2024, 2000),
('Blueberry', 2022, 1200),
('Blueberry', 2023, 1800),
('Blueberry', 2024, 2200),
('Mango', 2022, 900),
('Mango', 2023, 1300),
('Mango', 2024, 1700);
INSERT 0 9
postgres=# INSERT INTO warehouse_1(product_id, product_name, quantity) VALUES
(1, 'Laptop', 10),
(2, 'Phone', 0),
(3, 'Tablet', 5),
(4, 'Monitor', 2);

INSERT INTO warehouse_2(product_id, product_name, quantity) VALUES
(1, 'Laptop', 4),
(2, 'Phone', 0),
(3, 'Tablet', 1),
(4, 'Monitor', 3);
INSERT 0 4
INSERT 0 4
postgres=# INSERT INTO customers(name, email) VALUES
('Alice Anderson', 'alice@example.com'),
('Bob Brown', 'bob@example.com'),
('Charlie Clark', 'charlie@example.com'),
('Diana Davis', 'diana@example.com');

INSERT INTO orders(customer_id, order_date, total_amount, region_id) VALUES
(1, '2025-01-10', 150.75, 1),
(1, '2025-01-15', 50.25, 1),
(2, '2025-01-12', 200.00, 2),
(3, '2025-01-20', 320.50, 3),
(4, '2025-02-01', 450.00, 4);
INSERT 0 4
INSERT 0 5
postgres=# INSERT INTO order_items(order_id, product_id, quantity, price) VALUES 
(1, 1, 1, 1200.00),
(1, 4, 2, 150.00),
(2, 2, 1, 800.00),
(3, 3, 3, 400.00),
(4, 1, 1, 1200.00),
(4, 2, 2, 800.00),
(5, 4, 5, 150.00);
INSERT 0 7
postgres=# SELECT first_name, last_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);
 first_name | last_name |  salary   
------------+-----------+-----------
 Alice      | Anderson  |  95000.00
 Bob        | Brown     | 120000.00
 Frank      | Fisher    |  80000.00
 Ian        | Irwin     |  90000.00
(4 rows)

postgres=# WITH regional_sales AS (
    SELECT region_id, SUM(total_amount) AS total_sales
    FROM orders
    GROUP BY region_id
)
SELECT * FROM regional_sales
WHERE total_sales > 1000000;
 region_id | total_sales 
-----------+-------------
(0 rows)

postgres=# WITH RECURSIVE org_chart AS (
    SELECT employee_id, first_name, last_name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.first_name, e.last_name, e.manager_id
    FROM employees e
    INNER JOIN org_chart oc ON e.manager_id = oc.employee_id
)
SELECT * FROM org_chart;
 employee_id | first_name | last_name | manager_id 
-------------+------------+-----------+------------
           1 | Alice      | Anderson  |           
           5 | Evan       | Edwards   |           
           7 | Grace      | Green     |           
           2 | Bob        | Brown     |          1
           6 | Frank      | Fisher    |          1
           8 | Hannah     | Hill      |          7
          10 | Julia      | Jones     |          5
           3 | Charlie    | Clark     |          2
           4 | Diana      | Davis     |          2
           9 | Ian        | Irwin     |          3
(10 rows)

postgres=# SELECT product_name FROM warehouse_1
UNION
SELECT product_name FROM warehouse_2;

SELECT product_id FROM warehouse_1 WHERE quantity = 0
INTERSECT
SELECT product_id FROM warehouse_2 WHERE quantity = 0;
 product_name 
--------------
 Tablet
 Laptop
 Monitor
 Phone
(4 rows)

 product_id 
------------
          2
(1 row)

postgres=# SELECT first_name, last_name, department, salary,
       RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
FROM employees;
 first_name | last_name | department  |  salary   | dept_salary_rank 
------------+-----------+-------------+-----------+------------------
 Bob        | Brown     | Engineering | 120000.00 |                1
 Alice      | Anderson  | Engineering |  95000.00 |                2
 Frank      | Fisher    | Engineering |  80000.00 |                3
 Evan       | Edwards   | HR          |  60000.00 |                1
 Julia      | Jones     | HR          |  58000.00 |                2
 Hannah     | Hill      | Marketing   |  62000.00 |                1
 Grace      | Green     | Marketing   |  55000.00 |                2
 Ian        | Irwin     | Sales       |  90000.00 |                1
 Charlie    | Clark     | Sales       |  70000.00 |                2
 Diana      | Davis     | Sales       |  50000.00 |                3
(10 rows)

postgres=# WITH pivoted_sales AS (
    SELECT product_name,
           SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022, 
           SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023, 
           SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
    FROM sales
    GROUP BY product_name
)
SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2023', year_2023 FROM pivoted_sales
UNION ALL
SELECT product_name, '2024', year_2024 FROM pivoted_sales
ORDER BY product_name, year;
 product_name | year | sales_amount 
--------------+------+--------------
 Blueberry    | 2022 |      1200.00
 Blueberry    | 2023 |      1800.00
 Blueberry    | 2024 |      2200.00
 Mango        | 2022 |       900.00
 Mango        | 2023 |      1300.00
 Mango        | 2024 |      1700.00
 Strawberry   | 2022 |      1000.00
 Strawberry   | 2023 |      1500.00
 Strawberry   | 2024 |      2000.00
(9 rows)

postgres=# SELECT employee_id,
       SUM(salary) OVER (PARTITION BY department) AS total_dept_salary,
       AVG(salary) FILTER (WHERE experience_years > 5) OVER () AS avg_salary_senior
FROM employees;
 employee_id | total_dept_salary | avg_salary_senior  
-------------+-------------------+--------------------
           1 |         295000.00 | 85400.000000000000
           2 |         295000.00 | 85400.000000000000
           6 |         295000.00 | 85400.000000000000
          10 |         118000.00 | 85400.000000000000
           5 |         118000.00 | 85400.000000000000
           7 |         117000.00 | 85400.000000000000
           8 |         117000.00 | 85400.000000000000
           3 |         210000.00 | 85400.000000000000
           9 |         210000.00 | 85400.000000000000
           4 |         210000.00 | 85400.000000000000
(10 rows)

postgres=# 
